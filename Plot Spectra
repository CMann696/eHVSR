#%% Plot Spectra by station/channel

# Define the frequency range of interest
min_freq_of_interest = 0.1 # Set your preferred minimum frequency of interest
max_freq_of_interest = 15 # Set your preferred  maximum frequency of interest

# Set figure size
fig_size = (15, 10)

# Iterate through each station and plot
for key, spectra_list in spectra_by_station.items():
    network, station, channel = key
    
    # Create lists to store filtered power spectra within the frequency range for each trace
    filtered_spectra = []
    
    # Iterate through each trace in the station and filter its power spectrum within the frequency range
    for spectrum in spectra_list:
        freqs = np.arange(0.1, len(spectrum) + 1)  # Assume frequency range from 0.1 to length of spectrum
        
        # Filter the power spectrum within the frequency range of interest
        indices_of_interest = np.where((min_freq_of_interest <= freqs) & (freqs <= max_freq_of_interest))
        filtered_spectrum = spectrum[indices_of_interest]
        
        # Filter the frequency data to match the length of the filtered spectrum
        filtered_freqs = freqs[indices_of_interest]
        
        # Store the filtered power spectrum for plotting
        filtered_spectra.append((filtered_freqs, filtered_spectrum))
    
    # Plot all filtered power spectra for the current station
    plt.figure(figsize=fig_size)
    for freqs, spectrum in filtered_spectra:
        plt.semilogx(freqs, spectrum)
    
    # Set x-axis limits to the range of interest
    plt.xlim(min_freq_of_interest, max_freq_of_interest)
    
    # Get the maximum and minimum values of the filtered spectra for setting y-axis limits
    max_spectrum_value = np.max([np.max(spectrum) for _, spectrum in filtered_spectra])
    min_spectrum_value = np.min([np.min(spectrum) for _, spectrum in filtered_spectra])
    
    # Add some padding to the y-axis limits for better visualization (optional)
    y_padding = 0.1 * (max_spectrum_value - min_spectrum_value)
    plt.ylim(min_spectrum_value - y_padding, max_spectrum_value + y_padding)
    
    plt.grid(which='both')
    plt.title(f"Spectral Analysis:\n{station} - {channel}", fontsize=28)
    plt.xlabel("Frequency (Hz)", fontsize=26)
    plt.ylabel("Amplitude", fontsize=26)
    plt.xticks(fontsize=26)
    plt.yticks(fontsize=26)
    
    plt.show()
