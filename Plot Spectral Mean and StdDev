#%% Plot Spectral mean and standard deviation for each station/trace

# Define the frequency range of interest
min_freq_of_interest = 0.1
max_freq_of_interest = 15

# Set the figure size for better quality
fig_size = (15, 10)

# Set font size for all text elements
font_size = 38

# Iterate through each station and plot the mean spectrum with its standard deviation
for i, (mean_spectrum, std_deviation) in enumerate(zip(all_mean_spectra, all_std_deviations)):
    plt.figure(figsize=fig_size)  # Set the figure size
    
    # Plot the mean spectrum
    plt.semilogx(np.linspace(min_freq_of_interest, max_freq_of_interest, len(mean_spectrum)), mean_spectrum, linewidth=4, color='red', label='Mean Spectrum')
    
    # Plot the standard deviation as error bars
    plt.fill_between(np.linspace(min_freq_of_interest, max_freq_of_interest, len(std_deviation)),
                     mean_spectrum - std_deviation,
                     mean_spectrum + std_deviation,
                     color='teal', alpha=0.5, label='Mean Â± Std Dev')
    
    # Set x-axis limits to the range of interest
    plt.xlim(min_freq_of_interest, max_freq_of_interest)
    
    # Enable a grid for all of the tick marks on both the x-axis and y-axis
    plt.grid(which='both')
    
    # Set font sizes for title, axes titles, ticks, and tick labels
    plt.title(f"Mean Spectrum and 1-$\sigma$\n{station_names[i]}-{channels[i]}", fontsize=font_size)
    plt.xlabel("Frequency (Hz)", fontsize=font_size)
    plt.ylabel("Amplitude", fontsize=font_size)
    plt.xticks(fontsize=font_size)
    plt.yticks(fontsize=font_size)
    
    # Add legend
    plt.legend(fontsize=20)
    
    plt.show()
